[build-system]
requires = ["hatchling>=1.13"]
build-backend = "hatchling.build"

[tool.hatch.build]
sources = ["src"]

[tool.hatch.build.targets.wheel]
packages = ["src/app"]

[project]
name = "baseapi-hexagonal-architecture"
version = "0.1"
description = "BaseAPI Hexagonal Architecture"
readme = "README.md"
license = "MIT"
authors = [
    { name = "Matas Baglieri", email = "matiasbaglieri@gmail.com" },
]
requires-python = "==3.12.*"
dependencies = [
    "alembic==1.16.4",
    "alembic-postgresql-enum==1.8.0",
    "bcrypt==4.3.0",
    "dishka==1.6.0",
    "fastapi-error-map==0.9.2",
    "fastapi==0.116.1",
    "orjson==3.11.0",
    "psycopg[binary]==3.2.9",
    "pydantic[email]==2.11.7",
    "pyjwt[crypto]==2.10.1",
    "rtoml==0.12.0",
    "sqlalchemy[mypy]==2.0.41",
    "uuid6==2025.0.1",
    "uvicorn==0.35.0",
    "uvloop==0.21.0",
    # Integrations
    "stripe==7.11.0",
    "celery==5.3.6",
    "requests==2.31.0",
    "redis==5.0.1",
    "flower==2.0.1",
    "alembic==1.12.1",
    "click==8.1.7",
    "cryptography==41.0.5",
    "PyJWT==2.8.0",
]

[project.optional-dependencies]
dev = [
    "mypy==1.17.0",
    "pre-commit==4.2.0",
    "ruff==0.12.5",
    "slotscheck==0.19.1",
]
test = [
    "coverage==7.10.0",
    "line-profiler==5.0.0",
    "pytest==8.4.1",
    "pytest-asyncio==1.1.0"
]

[tool.coverage.report]
show_missing = true
skip_empty = true
exclude_also = [
    "if __name__ == .__main__.:",
    '@(abc\.)?abstractmethod',
    "pass",
    '\.\.\.',
    "from .*",
    "import .*",
    'logging\..*',
    'log\..*',
]

[tool.coverage.run]
source = ["src", ]
omit = [
    "**/__init__.py",
    "**/alembic/**",
]
concurrency = [
    "multiprocessing",
    "thread",
]
parallel = true
branch = true

[tool.mypy]
files = [
    "config",
    "scripts",
    "src",
    "tests",
]
exclude = "^.*alembic.*$"
strict = true
ignore_missing_imports = true
allow_subclassing_any = true
disallow_untyped_defs = false
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]

[tool.pytest.ini_options]
testpaths = ["tests", ]
markers = ["slow", ]
addopts = "-m 'not slow'"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff]
line-length = 88
preview = true  # experimental

[tool.ruff.format]
skip-magic-trailing-comma = false

[tool.ruff.lint]
select = [
    "A", # flake8-builtins            https://docs.astral.sh/ruff/rules/#flake8-builtins-a
    "ARG", # flake8-unused-arguments  https://docs.astral.sh/ruff/rules/#flake8-unused-arguments-arg
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
    "B", # flake8-bugbear             https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "C4", # flake8-comprehensions     https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "C90", # mccabe                   https://docs.astral.sh/ruff/rules/#mccabe-c90
    #    "COM", # flake8-commas            https://docs.astral.sh/ruff/rules/#flake8-commas-com
    # Incompatible with ruff formatter, but can be useful (uncomment once, then review changes)
    # See: https://github.com/astral-sh/ruff/issues/9216
    "DTZ", # flake8-datetimez         https://docs.astral.sh/ruff/rules/#flake8-datetimez-dtz
    "E", # pycodestyle-error          https://docs.astral.sh/ruff/rules/#error-e
    "ERA001", # commented-out-code    https://docs.astral.sh/ruff/rules/#eradicate-era
    "F", # pyflakes                   https://docs.astral.sh/ruff/rules/#pyflakes-f
    "FLY", # flynt                    https://docs.astral.sh/ruff/rules/#flynt-fly
    "I", # isort                      https://docs.astral.sh/ruff/rules/#isort-i
    "LOG", # flake8-logging           https://docs.astral.sh/ruff/rules/#flake8-logging-log
    "N", # pep8-naming                https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "PERF", # Perflint                https://docs.astral.sh/ruff/rules/#perflint-perf
    "PL", # pylint                    https://docs.astral.sh/ruff/rules/#pylint-pl
    "PT", # flake8-pytest-style       https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH", # flake8-use-pathlib       https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "Q", # flake8-quotes              https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "RET", # flake8-return (RET)      https://docs.astral.sh/ruff/rules/#flake8-return-ret
    "RSE", # flake8-raise (RSE)       https://docs.astral.sh/ruff/rules/#flake8-raise-rse
    "RUF", # Ruff-specific rules      https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "S", # flake8-bandit              https://docs.astral.sh/ruff/rules/#flake8-bandit-s
    "SIM", # flake8-simplify          https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "SLF", # flake8-self (SLF)        https://docs.astral.sh/ruff/rules/#flake8-self-slf
    "SLOT", # flake8-slots            https://docs.astral.sh/ruff/rules/#flake8-slots-slot
    "T20", # flake8-print             https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "TCH", # flake8-type-checking     https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "TID", # flake8-tidy-imports      https://docs.astral.sh/ruff/rules/#flake8-tidy-imports-tid
    "UP", # pyupgrade                 https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "W", # pycodestyle-warning        https://docs.astral.sh/ruff/rules/#warning-w
]
ignore = [
    "N818", # error-suffix-on-exception-name
    "PLR0913", # too-many-arguments
    "PLR0917", # too-many-positional-arguments
    "PLR6301", # no-self-use
    "PTH123", # builtin-open
    "TC001", # typing-only-first-party-import
    "TC002", # typing-only-third-party-import
    "TC003", # typing-only-standard-library-import
    "TC006", # runtime-cast-value
    "UP015", # redundant-open-modes
]

[tool.ruff.lint.isort]
combine-as-imports = true
force-wrap-aliases = true
split-on-trailing-comma = true

[tool.ruff.lint.per-file-ignores]
"src/app/infrastructure/persistence_sqla/alembic/**" = ["ALL", ]
"tests/**" = [
    "ARG002", # unused-method-argument
    "PLC2801", # unnecessary-dunder-call
    "PLR2004", # magic-value-comparison
    "PT011", # pytest-raises-too-broad
    "S101", # assert
    "S106", # hardcoded-password-func-arg
    "S107", # hardcoded-password-default
]
#
"src/app/domain/value_objects/base.py" = ["B024", ]                          # abstract-base-class-without-abstract-method
"src/app/infrastructure/adapters/password_hasher_bcrypt.py" = ["E501"]       # line-too-long
"src/app/infrastructure/auth/session/constants.py" = ["S105"]                # hardcoded-password-string
"src/app/presentation/http/auth/constants.py" = ["S105"]                     # hardcoded-password-string
"src/app/presentation/http/exceptions/handlers.py" = ["RUF029", ]            # unused-async
"scripts/dishka/plot_dependencies_data.py" = ["T201", ]                      # print

[tool.slotscheck]
strict-imports = true
exclude-modules = '''
^app\.infrastructure\.persistence_sqla\.alembic
'''
